import os
import subprocess
import logging
import html
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.types import (
    FSInputFile,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import asyncio
from config import BOT_TOKEN, WG_DIR, WG_SERVER_CONFIG, WG_SERVER_IP, WG_SERVER_PORT, WG_SERVER_PUBKEY, ADMIN_IDS

class AdminStates(StatesGroup):
    waiting_for_client_name = State()
    waiting_for_delete_confirmation = State()
    waiting_for_access_decision = State()
    waiting_for_broadcast_confirmation = State()

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

access_requests = set()
ALLOWED_USERS_FILE = "allowed_users.txt"

logging.basicConfig(
    level=logging.DEBUG, 
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
def load_allowed_users():
    if os.path.exists(ALLOWED_USERS_FILE):
        with open(ALLOWED_USERS_FILE, 'r') as f:
            return [int(line.strip()) for line in f if line.strip()]
    return []

def save_allowed_user(user_id):
    allowed = load_allowed_users()
    if user_id not in allowed:
        allowed.append(user_id)
        with open(ALLOWED_USERS_FILE, 'w') as f:
            for uid in allowed:
                f.write(f"{uid}\n")

def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

def is_allowed(user_id: int) -> bool:
    return user_id in ADMIN_IDS or user_id in load_allowed_users()
def get_main_keyboard(user_id: int) -> ReplyKeyboardMarkup:
    buttons = [[KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")]]
    if is_admin(user_id):
        buttons.append([KeyboardButton(text="üëë –ê–¥–º–∏–Ω")])
        buttons[0].append(KeyboardButton(text="üÜï –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥"))
    elif is_allowed(user_id):
        buttons[0].append(KeyboardButton(text="üÜï –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥"))
    else:
        buttons.append([KeyboardButton(text="üîí –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø")])
    
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

help_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ùì –ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True
)

admin_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥"), KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton(text="üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ä–≤–µ—Ä"), KeyboardButton(text="üë• –ó–∞–ø—Ä–æ—Å—ã –¥–æ—Å—Ç—É–ø–∞")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True
)

def generate_keys(client_name: str) -> tuple[str, str]:
    try:
        priv_key = subprocess.check_output("wg genkey", shell=True, text=True).strip()
        pub_key = subprocess.check_output(f"echo '{priv_key}' | wg pubkey", shell=True, text=True).strip()
        psk = subprocess.check_output("wg genpsk", shell=True, text=True).strip()

        used_ips = set()
        if os.path.exists(WG_SERVER_CONFIG):
            with open(WG_SERVER_CONFIG, 'r') as f:
                for line in f:
                    if "AllowedIPs = 10.66.66." in line:
                        ip = int(line.split("=")[1].strip().split(".")[3].split("/")[0])
                        used_ips.add(ip)

        new_ip = next(i for i in range(2, 254) if i not in used_ips)
        client_ipv4 = f"10.66.66.{new_ip}/32"
        client_ipv6 = f"fd42:42:42::{new_ip}/128"

        client_conf = f"""[Interface]
PrivateKey = {priv_key}
Address = {client_ipv4}, {client_ipv6}
DNS = 1.1.1.1, 1.0.0.1

[Peer]
PublicKey = {WG_SERVER_PUBKEY}
PresharedKey = {psk}
AllowedIPs = 0.0.0.0/0, ::/0
Endpoint = {WG_SERVER_IP}:{WG_SERVER_PORT}
PersistentKeepalive = 25
"""

        server_peer = f"\n[Peer]\n### {client_name}\nPublicKey = {pub_key}\nPresharedKey = {psk}\nAllowedIPs = {client_ipv4}, {client_ipv6}\n"
        
        with open(WG_SERVER_CONFIG, 'a') as f:
            f.write(server_peer)

        apply_wg_config()
        return client_conf, client_ipv4

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π: {e}")
        raise

def apply_wg_config():
    try:
        subprocess.run(["wg", "syncconf", "wg0", WG_SERVER_CONFIG], check=True)
    except subprocess.CalledProcessError:
        try:
            subprocess.run(["wg-quick", "down", "wg0"], check=True)
            subprocess.run(["wg-quick", "up", "wg0"], check=True)
        except subprocess.CalledProcessError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ WireGuard: {e}")
            raise

def get_client_names() -> list[str]:
    clients = []
    if os.path.exists(WG_SERVER_CONFIG):
        with open(WG_SERVER_CONFIG, 'r') as f:
            for line in f:
                if line.startswith("### "):
                    clients.append(line[4:].strip())
    return clients

def delete_client(client_name: str) -> bool:
    try:
        with open(WG_SERVER_CONFIG, 'r') as f:
            lines = f.readlines()

        start = next((i for i, line in enumerate(lines) if line.startswith(f"### {client_name}")), None)
        if start is None:
            return False

        end = next((i for i in range(start+1, len(lines)) if lines[i].strip() == ""), len(lines))
        
        with open(WG_SERVER_CONFIG, 'w') as f:
            f.writelines(lines[:start] + lines[end:])
        
        apply_wg_config()
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        return False

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")],
            [KeyboardButton(text="üîí –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø")] if not is_allowed(message.from_user.id) else []
        ],
        resize_keyboard=True
    )
    
    if is_allowed(message.from_user.id):
        keyboard.keyboard[0].append(KeyboardButton(text="üÜï –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥"))
    
    if is_admin(message.from_user.id):
        keyboard.keyboard.append([KeyboardButton(text="üëë –ê–¥–º–∏–Ω")])
    
    await message.answer(
        "üîê <b>DmitriyVPN Bot</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode=ParseMode.HTML,
        reply_markup=keyboard
    )

@dp.message(F.text == "üÜï –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥")
async def create_config(message: types.Message):
    if not is_allowed(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –¥–æ—Å—Ç—É–ø —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –∫–æ–Ω—Ñ–∏–≥–∞ (–∞–Ω–≥–ª–∏–π—Å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤):",
        reply_markup=ReplyKeyboardRemove()
    )

@dp.message(F.text == "üìã –°–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π")
async def list_connections(message: types.Message):
    if not is_allowed(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –¥–æ—Å—Ç—É–ø —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
        
    try:
        result = subprocess.run(
            ["wg", "show", "wg0"],
            capture_output=True, text=True, encoding='utf-8'
        )
        
        if result.returncode == 0 and result.stdout.strip():
            response = "üî∑ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b>\n\n<pre>" + result.stdout + "</pre>"
        else:
            response = "‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"
        
        await message.answer(response, parse_mode=ParseMode.HTML)
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
        logger.error(f"–û—à–∏–±–∫–∞ list_connections: {e}")

@dp.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def show_help(message: types.Message):
    await message.answer(
        "‚ÑπÔ∏è <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "üÜï –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥ - –Ω–æ–≤—ã–π VPN-–∫–æ–Ω—Ñ–∏–≥\n"
        "‚ùì –ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è",
        parse_mode=ParseMode.HTML,
        reply_markup=help_keyboard
    )

@dp.message(F.text == "‚ùì –ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è")
async def connection_guide(message: types.Message):
    await message.answer(
        "üì± <b>–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è:</b>\n\n"
        "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ WireGuard —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞\n"
        "2. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥\n"
        "3. –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ\n\n"
        "–î–ª—è –ü–ö: –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª .conf\n"
        "–î–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞: –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥",
        parse_mode=ParseMode.HTML,
        reply_markup=help_keyboard
    )

@dp.message(F.text == "üîí –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø")
async def request_access(message: types.Message):
    user_id = message.from_user.id
    if is_allowed(user_id):
        await message.answer("‚úÖ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞")
        return
    
    if user_id in access_requests:
        # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–µ—Ä–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin_link = f"<a href='tg://user?id={ADMIN_IDS[0]}'>–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É</a>"
        await message.answer(
            f"‚è≥ –í–∞—à –∑–∞–ø—Ä–æ—Å —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è")
        return
    
    access_requests.add(user_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
    for admin_id in ADMIN_IDS:
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_link = f"<a href='tg://user?id={user_id}'>{html.escape(message.from_user.full_name)}</a>"
            
            await bot.send_message(
                admin_id,
                f"üîî –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø:\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_link}\n"
                f"üÜî ID: {user_id}\n\n"
                f"–†–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ—Å—Ç—É–ø?",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[
                        [KeyboardButton(text=f"‚úÖ –†–∞–∑—Ä–µ—à–∏—Ç—å {user_id}")],
                        [KeyboardButton(text=f"‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å {user_id}")],
                        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
                    ],
                    resize_keyboard=True
                ),
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
    admin_name = "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"        
    admin_link = f"<a href='tg://user?id={ADMIN_IDS[0]}'>–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É</a>"
    await message.answer(
        f"‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è.\n"
        f"–ü—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É - {admin_link}",
        reply_markup=ReplyKeyboardRemove(), parse_mode=ParseMode.HTML
    )

@dp.message(F.text.startswith("‚úÖ –†–∞–∑—Ä–µ—à–∏—Ç—å "))
async def grant_access(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    
    try:
        user_id = int(message.text.split()[-1])
        if user_id in access_requests:
            access_requests.remove(user_id)
            save_allowed_user(user_id)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await bot.send_message(
                user_id,
                "üéâ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –±—ã–ª –æ–¥–æ–±—Ä–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.",
                reply_markup=get_main_keyboard(user_id)
            )
            
            await message.answer(
                f"‚úÖ –î–æ—Å—Ç—É–ø –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Ä–∞–∑—Ä–µ—à–µ–Ω",
                reply_markup=admin_keyboard
            )
        else:
            await message.answer("‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=admin_keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ grant_access: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞", reply_markup=admin_keyboard)

@dp.message(F.text.startswith("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å "))
async def deny_access(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    
    try:
        user_id = int(message.text.split()[-1])
        if user_id in access_requests:
            access_requests.remove(user_id)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await bot.send_message(
                user_id,
                "‚ùå –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="üîí –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø")]],
                    resize_keyboard=True
                )
            )
            
            await message.answer(
                f"‚ùå –î–æ—Å—Ç—É–ø –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ç–∫–ª–æ–Ω—ë–Ω",
                reply_markup=admin_keyboard
            )
        else:
            await message.answer("‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=admin_keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ deny_access: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞", reply_markup=admin_keyboard)

@dp.message(F.text == "üë• –ó–∞–ø—Ä–æ—Å—ã –¥–æ—Å—Ç—É–ø–∞")
async def show_access_requests(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    
    if not access_requests:
        await message.answer("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –¥–æ—Å—Ç—É–ø", reply_markup=admin_keyboard)
        return
    
    requests_text = "\n".join(f"üÜî {user_id}" for user_id in access_requests)
    await message.answer(
        f"üîî –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –¥–æ—Å—Ç—É–ø:\n\n{requests_text}",
        reply_markup=admin_keyboard
    )


class Form(StatesGroup):
    waiting_for_config_name = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∫–æ–Ω—Ñ–∏–≥–∞

@dp.message(F.text == "üÜï –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥")
async def start_create_config(message: types.Message, state: FSMContext):
    if not is_allowed(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –∫–æ–Ω—Ñ–∏–≥–∞ (–∞–Ω–≥–ª–∏–π—Å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤):",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(Form.waiting_for_config_name)

@dp.message(Form.waiting_for_config_name)
async def process_config_name(message: types.Message, state: FSMContext):
    try:
        name = message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏
        if not name.isalnum():
            await message.answer(
                "‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=ReplyKeyboardRemove()
            )
            return  # –û—Å—Ç–∞–≤–ª—è–µ–º –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞
        config, ip = generate_keys(name)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        conf_path = f"/tmp/{name}.conf"
        with open(conf_path, 'w') as f:
            f.write(config)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞
        await message.reply_document(
            FSInputFile(conf_path, filename=f"wg_{name}.conf"),
            caption=f"üîë –ö–æ–Ω—Ñ–∏–≥ {name} (IP: {ip.split('/')[0]})",
            reply_markup=get_main_keyboard(message.from_user.id)
        )

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ QR-–∫–æ–¥–∞
        qr_path = f"/tmp/{name}.png"
        subprocess.run(f"qrencode -o {qr_path} -t PNG < {conf_path}", shell=True)
        await message.reply_photo(FSInputFile(qr_path))

        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        os.unlink(conf_path)
        os.unlink(qr_path)
        
        # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.clear()

    except Exception as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞: {str(e)}",
            reply_markup=get_main_keyboard(message.from_user.id)
        )
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞: {e}")
        await state.clear()

# –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ process_config_name –∏ –∑–∞–º–µ–Ω—è–µ–º –µ–≥–æ –Ω–∞:
@dp.message(
    F.text &
    ~F.text.startswith(("üëë", "üîô")) &
    ~F.text.in_({
        "üÜï –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥", "‚ÑπÔ∏è –ü–æ–º–æ—â—å",
        "‚ùì –ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è", "üóë –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", 
        "üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", "‚úÖ –î–∞", "‚ùå –ù–µ—Ç", "üîí –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø",
        "üë• –ó–∞–ø—Ä–æ—Å—ã –¥–æ—Å—Ç—É–ø–∞", "üìã –°–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"
    })
)
async def handle_other_messages(message: types.Message):
    # –ü—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥–∞–º
    pass

@dp.message(F.text == "üëë –ê–¥–º–∏–Ω")
async def admin_panel(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await message.answer(
        "üëë <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode=ParseMode.HTML,
        reply_markup=admin_keyboard
    )

@dp.message(F.text == "üóë –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥")
async def delete_config_start(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    clients = get_client_names()
    if not clients:
        await message.answer("‚ÑπÔ∏è –ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", reply_markup=admin_keyboard)
        return
    
    clients_text = "\n".join(f"‚Ä¢ {name}" for name in clients)
    await message.answer(
        f"üóë <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:</b>\n{clients_text}",
        parse_mode=ParseMode.HTML,
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(AdminStates.waiting_for_client_name)

@dp.message(AdminStates.waiting_for_client_name)
async def delete_config_confirm(message: types.Message, state: FSMContext):
    client_name = message.text.strip()
    current_clients = get_client_names()
    
    if client_name not in current_clients:
        await message.answer(
            "‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=admin_keyboard
        )
        await state.clear()
        return
    
    await state.update_data(client_name=client_name)
    await message.answer(
        f"‚ö†Ô∏è –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ <b>{client_name}</b>?\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!",
        parse_mode=ParseMode.HTML,
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")]],
            resize_keyboard=True
        )
    )
    await state.set_state(AdminStates.waiting_for_delete_confirmation)

@dp.message(AdminStates.waiting_for_delete_confirmation, F.text == "‚úÖ –î–∞")
async def delete_config_execute(message: types.Message, state: FSMContext):
    data = await state.get_data()
    client_name = data["client_name"]
    
    if delete_client(client_name):
        await message.answer(
            f"‚úÖ –ö–ª–∏–µ–Ω—Ç <b>{client_name}</b> —É–¥–∞–ª–µ–Ω",
            parse_mode=ParseMode.HTML,
            reply_markup=admin_keyboard
        )
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏",
            reply_markup=admin_keyboard
        )
    await state.clear()

@dp.message(AdminStates.waiting_for_delete_confirmation, F.text == "‚ùå –ù–µ—Ç")
async def delete_config_cancel(message: types.Message, state: FSMContext):
    await message.answer(
        "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=admin_keyboard
    )
    await state.clear()

@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        clients = get_client_names()
        result = subprocess.run(
            ["wg", "show", "wg0"],
            capture_output=True, text=True, encoding='utf-8'
        )
        
        stats = "‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö" if not result.stdout.strip() else f"<pre>{result.stdout}</pre>"
        
        await message.answer(
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞</b>\n\n"
            f"üë§ –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(clients)}\n\n"
            f"{stats}",
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        logger.error(f"–û—à–∏–±–∫–∞ show_stats: {e}")

@dp.message(F.text == "üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ä–≤–µ—Ä")
async def restart_server(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        subprocess.run(["wg-quick", "down", "wg0"], check=True)
        subprocess.run(["wg-quick", "up", "wg0"], check=True)
        await message.answer("üîÑ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω")
    except subprocess.CalledProcessError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e.stderr}")
        logger.error(f"–û—à–∏–±–∫–∞ restart_server: {e}")
    except Exception as e:
        await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        logger.error(f"–û—à–∏–±–∫–∞ restart_server: {e}")

@dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def back_to_main(message: types.Message):
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_keyboard(message.from_user.id)
    )

@dp.message(Command("send"))
async def cmd_send(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
    
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /send")
        return
    
    await state.set_state(AdminStates.waiting_for_broadcast_confirmation)
    await state.update_data(broadcast_text=args[1])
    
    await message.answer(
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:\n\n{args[1]}",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")],
                [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]
            ],
            resize_keyboard=True
        )
    )

@dp.message(F.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", AdminStates.waiting_for_broadcast_confirmation)
async def confirm_broadcast(message: types.Message, state: FSMContext):
    data = await state.get_data()
    broadcast_text = data.get("broadcast_text", "")
    await state.clear()
    
    if not broadcast_text:
        await message.answer("‚ùå –¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=admin_keyboard)
        return
    
    all_users = set(ADMIN_IDS + load_allowed_users())
    success = 0
    failed = 0
    
    for user_id in all_users:
        try:
            await bot.send_message(
                user_id,
                f"üì¢ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n\n{broadcast_text}",
                parse_mode=ParseMode.HTML
            )
            success += 1
            await asyncio.sleep(0.1)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            failed += 1
    
    await message.answer(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n"
        f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {success}\n"
        f"‚Ä¢ –ù–µ —É–¥–∞–ª–æ—Å—å: {failed}",
        reply_markup=admin_keyboard
    )

@dp.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", AdminStates.waiting_for_broadcast_confirmation)
async def cancel_broadcast(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=admin_keyboard)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())